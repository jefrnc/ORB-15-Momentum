#!/usr/bin/env python3
"""
Test final para verificar que todo funciona correctamente
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, time
import pytz
from src.strategies.orb_strategy import ORBStrategy
from src.core.orb_config import ORBConfig

def test_strategy_methods():
    """Test que los m√©todos existen y funcionan"""
    print("üß™ Test 1: Verificando m√©todos de ORBStrategy...")
    
    config = ORBConfig()
    strategy = ORBStrategy(config)
    
    # Verificar que existe analyze_tick
    if hasattr(strategy, 'analyze_tick'):
        print("‚úÖ M√©todo analyze_tick existe")
    else:
        print("‚ùå ERROR: M√©todo analyze_tick NO existe")
        return False
        
    # Verificar que NO existe analyze_candle
    if not hasattr(strategy, 'analyze_candle'):
        print("‚úÖ M√©todo analyze_candle correctamente removido")
    else:
        print("‚ùå ERROR: M√©todo analyze_candle todav√≠a existe")
        return False
    
    return True

def test_config_attributes():
    """Test que los atributos de config son correctos"""
    print("\nüß™ Test 2: Verificando atributos de ORBConfig...")
    
    config = ORBConfig()
    
    # Verificar que existe take_profit_ratio
    if hasattr(config, 'take_profit_ratio'):
        print(f"‚úÖ Atributo take_profit_ratio existe: {config.take_profit_ratio}")
    else:
        print("‚ùå ERROR: Atributo take_profit_ratio NO existe")
        return False
        
    # Verificar que NO existe take_profit_pct
    if not hasattr(config, 'take_profit_pct'):
        print("‚úÖ Atributo take_profit_pct correctamente removido")
    else:
        print("‚ùå ERROR: Atributo take_profit_pct todav√≠a existe")
        return False
    
    return True

def test_strategy_simulation():
    """Test simulaci√≥n b√°sica de la estrategia"""
    print("\nüß™ Test 3: Simulando funcionamiento b√°sico...")
    
    config = ORBConfig()
    strategy = ORBStrategy(config)
    
    # Simular un tick durante el ORB window
    ny_tz = pytz.timezone('America/New_York')
    orb_time = datetime.now(ny_tz).replace(hour=9, minute=35, second=0)
    
    tick = {
        'timestamp': orb_time,
        'price': 450.50,
        'volume': 100000,
        'last': 450.50
    }
    
    try:
        # Procesar tick para construcci√≥n del rango
        strategy.process_tick_for_range(tick)
        print("‚úÖ process_tick_for_range funciona correctamente")
    except Exception as e:
        print(f"‚ùå ERROR en process_tick_for_range: {e}")
        return False
    
    # Simular an√°lisis de tick fuera del ORB window
    entry_time = datetime.now(ny_tz).replace(hour=10, minute=30, second=0)
    tick['timestamp'] = entry_time
    tick['price'] = 452.00  # Por encima del rango
    
    try:
        signal = strategy.analyze_tick(tick)
        print("‚úÖ analyze_tick funciona correctamente")
        if signal:
            print(f"   Se√±al generada: {signal}")
    except Exception as e:
        print(f"‚ùå ERROR en analyze_tick: {e}")
        return False
    
    return True

def test_imports():
    """Test que todos los imports funcionan"""
    print("\nüß™ Test 4: Verificando imports...")
    
    try:
        import orb_trader
        print("‚úÖ orb_trader.py se puede importar")
    except Exception as e:
        print(f"‚ùå ERROR importando orb_trader: {e}")
        return False
        
    try:
        import orb_trader_simple
        print("‚úÖ orb_trader_simple.py se puede importar")
    except Exception as e:
        print(f"‚ùå ERROR importando orb_trader_simple: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("VERIFICACI√ìN FINAL - ORB Trading System")
    print("=" * 60)
    
    tests = [
        test_strategy_methods(),
        test_config_attributes(),
        test_strategy_simulation(),
        test_imports()
    ]
    
    print("\n" + "=" * 60)
    if all(tests):
        print("üéâ TODOS LOS TESTS PASARON - El sistema est√° listo!")
        print("\nPuedes ejecutar el bot con:")
        print("  python orb_trader_simple.py")
    else:
        print("‚ö†Ô∏è  ALGUNOS TESTS FALLARON - Revisa los errores")
    print("=" * 60)